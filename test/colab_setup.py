#!/usr/bin/env python3
"""
COLAB SETUP SCRIPT - INITIAL ENVIRONMENT SETUP

Run this first in Colab to set up the environment.
"""

import os
import sys

def setup_colab_environment():
    """SETUP COLAB ENVIRONMENT FOR TESTING"""
    print("üîß SETTING UP COLAB ENVIRONMENT")
    
    # 1. INSTALL DEPENDENCIES
    print("\n1Ô∏è‚É£ INSTALLING DEPENDENCIES...")
    os.system("pip install torch transformers sentence-transformers langchain openai chromadb")
    
    # 2. CLONE REPOSITORY (IF NOT ALREADY DONE)
    print("\n2Ô∏è‚É£ CHECKING REPOSITORY...")
    if not os.path.exists("R0-K0"):
        print("   CLONING R0-K0 REPOSITORY...")
        os.system("git clone https://github.com/yourusername/R0-K0.git")
        os.chdir("R0-K0")
    else:
        print("   REPOSITORY ALREADY EXISTS")
        if os.path.exists("R0-K0"):
            os.chdir("R0-K0")
    
    # 3. ADD TO PYTHON PATH
    print("\n3Ô∏è‚É£ SETTING PYTHON PATH...")
    current_dir = os.getcwd()
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
        print(f"   ADDED {current_dir} TO PYTHON PATH")
    
    # 4. VERIFY IMPORTS
    print("\n4Ô∏è‚É£ VERIFYING IMPORTS...")
    try:
        import torch
        print(f"   ‚úÖ PyTorch: {torch.__version__}")
    except ImportError as e:
        print(f"   ‚ùå PyTorch: {e}")
    
    try:
        import transformers
        print(f"   ‚úÖ Transformers: {transformers.__version__}")
    except ImportError as e:
        print(f"   ‚ùå Transformers: {e}")
    
    try:
        import sentence_transformers
        print(f"   ‚úÖ Sentence-Transformers: {sentence_transformers.__version__}")
    except ImportError as e:
        print(f"   ‚ùå Sentence-Transformers: {e}")
    
    try:
        import langchain
        print(f"   ‚úÖ LangChain: {langchain.__version__}")
    except ImportError as e:
        print(f"   ‚ùå LangChain: {e}")
    
    try:
        import openai
        print(f"   ‚úÖ OpenAI: {openai.__version__}")
    except ImportError as e:
        print(f"   ‚ùå OpenAI: {e}")
    
    # 5. SETUP OPENAI API KEY
    print("\n5Ô∏è‚É£ OPENAI API KEY SETUP...")
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("   ‚ùå OPENAI_API_KEY NOT SET")
        print("   üí° SET YOUR API KEY: os.environ['OPENAI_API_KEY'] = 'your-key-here'")
        print("   üí° OR USE: getpass() to input securely")
    else:
        print(f"   ‚úÖ OPENAI API KEY FOUND: {api_key[:8]}...")
    
    # 6. TEST BASIC IMPORTS
    print("\n6Ô∏è‚É£ TESTING BASIC IMPORTS...")
    try:
        # TEST OVERLAY IMPORTS
        from overlay.emotion import EmotionEngine, EmotionConfig
        print("   ‚úÖ Overlay emotion imports successful")
        
        from overlay.memory import EpisodicMemory, MemoryConfig
        print("   ‚úÖ Overlay memory imports successful")
        
        from overlay.core import AgentLoop
        print("   ‚úÖ Overlay core imports successful")
        
    except ImportError as e:
        print(f"   ‚ùå Overlay imports failed: {e}")
        print("   üí° Make sure you're in the R0-K0 directory")
    
    print("\nüéâ COLAB ENVIRONMENT SETUP COMPLETE!")
    print("üí° Next: Set your OpenAI API key and run the test suite")

def get_openai_key():
    """SECURELY GET OPENAI API KEY FROM USER"""
    try:
        from getpass import getpass
        api_key = getpass("Enter your OpenAI API key: ")
        os.environ["OPENAI_API_KEY"] = api_key
        print("‚úÖ API key set successfully")
        return True
    except Exception as e:
        print(f"‚ùå Failed to set API key: {e}")
        return False

if __name__ == "__main__":
    setup_colab_environment()
    
    # ASK FOR API KEY IF NOT SET
    if not os.getenv("OPENAI_API_KEY"):
        print("\nüîë SETTING UP OPENAI API KEY...")
        get_openai_key()
